//autogenerated
package edu.rutgers.elearning.component.journalism.autogenerated;

import java.util.Random;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import edu.rutgers.elearning.component.journalism.dao.*;
import edu.rutgers.elearning.component.pte.ProblemTemplateEngine;
import edu.rutgers.elearning.component.questions.GeneratedQuestion;
import edu.rutgers.elearning.component.questions.QuestionAnswer;
import edu.rutgers.elearning.component.questions.RegexQuestion;
import edu.rutgers.elearning.util.math.SigfigNumber;
import edu.rutgers.elearning.component.journalism.model.*;
import edu.rutgers.elearning.component.journalism.model.SubjectModel.Gender;
import edu.rutgers.elearning.component.journalism.pte.JournalismController;

public class AcceptOrExcept extends ProblemTemplateEngine {

SubjectDAO subjectAccess = new SubjectDAO();
Random rand = new Random();
String chosenSentenceAnswer, chosenSentenceDistractor;
SubjectModel SUBJECT1 = JournalismController.selectRandom(subjectAccess.selectByNounType(Arrays.asList(new String[] {"PROPERNAME"}), Arrays.asList(Gender.values())));
String PROPERNAME1 = SUBJECT1.getSubject();

public AcceptOrExcept(int problemtemplate_id, int[] criticalskill_ids, int debugmode, QuestionType type) {
	super(problemtemplate_id, criticalskill_ids, debugmode, type);
	int distractorIndex, chosen;
String ACCEPTAnswer, ACCEPTDistractor;
ACCEPTAnswer = ACCEPTDistractor = "";
distractorIndex = 0;
ArrayList<String> ACCEPTList = new ArrayList<String>();
chosen = rand.nextInt(1);
if(chosen==0){
	ACCEPTList = new ArrayList<String>();
	ACCEPTList.add("accept");
	ACCEPTList.add("except");

	ACCEPTAnswer = "accept";
	distractorIndex = rand.nextInt(ACCEPTList.size());
	ACCEPTDistractor = ACCEPTList.get(distractorIndex);
}

String EXCEPTAnswer, EXCEPTDistractor;
EXCEPTAnswer = EXCEPTDistractor = "";
distractorIndex = 0;
ArrayList<String> EXCEPTList = new ArrayList<String>();
chosen = rand.nextInt(1);
if(chosen==0){
	EXCEPTList = new ArrayList<String>();
	EXCEPTList.add("except");
	EXCEPTList.add("accept");

	EXCEPTAnswer = "except";
	distractorIndex = rand.nextInt(EXCEPTList.size());
	EXCEPTDistractor = EXCEPTList.get(distractorIndex);
}

ArrayList<String> sentenceList = new ArrayList<String>();
ArrayList<String> distractorList = new ArrayList<String>();
            
sentenceList.add("I did not " + ACCEPTAnswer + " his resignation.");
distractorList.add("I did not " + ACCEPTDistractor + " his resignation.");
sentenceList.add("Did you " + ACCEPTAnswer + " his proposal?");
distractorList.add("Did you " + ACCEPTDistractor + " his proposal?");
sentenceList.add("Give her a little time to " + ACCEPTAnswer + " the situation.");
distractorList.add("Give her a little time to " + ACCEPTDistractor + " the situation.");
sentenceList.add("It is still hard to " + ACCEPTAnswer + " the terrible things that happened.");
distractorList.add("It is still hard to " + ACCEPTDistractor + " the terrible things that happened.");
sentenceList.add("I will " + ACCEPTAnswer + " the offer.");
distractorList.add("I will " + ACCEPTDistractor + " the offer.");
sentenceList.add("He learned to " + ACCEPTAnswer + " that his new life was in Canada.");
distractorList.add("He learned to " + ACCEPTDistractor + " that his new life was in Canada.");
sentenceList.add("Everybody was there " + EXCEPTAnswer + " for " + PROPERNAME1.trim() + " .");
distractorList.add("Everybody was there " + EXCEPTDistractor + " for " + PROPERNAME1.trim() + " .");
sentenceList.add("He likes all animals " + EXCEPTAnswer + " for " + PROPERNAME1.trim() + " .");
distractorList.add("He likes all animals " + EXCEPTDistractor + " for " + PROPERNAME1.trim() + " .");
sentenceList.add("Everyone was invited " + EXCEPTAnswer + " for " + PROPERNAME1.trim() + " .");
distractorList.add("Everyone was invited " + EXCEPTDistractor + " for " + PROPERNAME1.trim() + " .");
sentenceList.add("The building was empty " + EXCEPTAnswer + " for a " + PROPERNAME1.trim() + ".");
distractorList.add("The building was empty " + EXCEPTDistractor + " for a " + PROPERNAME1.trim() + ".");
sentenceList.add("The building " + EXCEPTAnswer + " for " + PROPERNAME1.trim() + " .");
distractorList.add("The building " + EXCEPTDistractor + " for " + PROPERNAME1.trim() + " .");
sentenceList.add("I saw everyone " + EXCEPTAnswer + " for " + PROPERNAME1.trim() + " .");
distractorList.add("I saw everyone " + EXCEPTDistractor + " for " + PROPERNAME1.trim() + " .");
int sentenceIndex = rand.nextInt(sentenceList.size());
chosenSentenceAnswer = sentenceList.get(sentenceIndex);
chosenSentenceDistractor = distractorList.get(sentenceIndex);
}
/**
	 * Formats the answers from a SigfigNumber into a
	 * QuestionAnswer object. Answers passed to this method
	 * can either be correct or incorrect answers.
	 *
	 * @param answer - The answer to be displayed
	 * @param correct - true if this is the correct answer, otherwise false
	 * @return QuestionAnswer - Answer to be displayed to the user as one
	 * 		   of the multiple choice options
	 */
	protected QuestionAnswer formatAnswer(SigfigNumber answer, boolean correct) {
		return null; //this isn't needed for open answer
	}

	/**
	 * Populates the multiple choice answers, typically
	 * one correct answer and four incorrect answers. If
	 * five answers are not defined, this method will generate
	 * answers similar to the correct answer.
	 *
	 * @return List&lt;QuestionAnswer&gt; - the answers to be displayed
	 * 		   to the users.
	 */
	public List<QuestionAnswer> getMultipleChoiceAnswers() {
		return null; //this isn't needed for open answer
	}

	/**
	 * Used to generate the question text displayed.
	 *
	 * @return question - String question, this will be
	 * 		   displayed to the user
	 */
	public String getQuestionText() {
            return chosenSentenceDistractor;
        }

	@Override
	/**
	 * Serves the question to the user. Depending on
	 * the type variable, this method will either
	 * serve a multiple choice question or an open
	 * answer question.
	 *
	 * @return GeneratedQuestion - object used to display
	 * 		   a multiple choice or open answer question
	 */
	public GeneratedQuestion serveQuestion() {
		RegexQuestion rq = new RegexQuestion();
		if (type == QuestionType.OPENANSWER) {
			rq.setRegex_accept(chosenSentenceAnswer);
			//gq.setRegex_reject(null);
		}
		if (rq != null) {
			rq.setQuestion_text(getQuestionText());
			rq.loadMetadata(problemtemplate_id);
			//gq.setDifficulty(difficulty);
			// TODO add critical skills
		}
		return rq;
	}

	public String storeDistractors()
	{
		HashMap<String, Object> dataMap = new HashMap<String, Object>();

		//not sure how to deal with this yet

		return dataMap.toString();
	}

	/**
	 * This method is for the 2018 Math Placement Exam.
	 * This method is to store the question data for a reporting
	 * service. This method will return a listing of all variables
	 * in this PTE
	 *
	 * @return String the version
	 */
	public String storeVersion()
	{
		HashMap<String, Object> dataMap = new HashMap<String, Object>();

                //TODO: this

		return dataMap.toString();
	}

	@Override
	public String getDebugInfo() {
		// TODO Auto-generated method stub
		return null;
	}

}

