//autogenerated
package edu.rutgers.elearning.component.journalism.autogenerated;

import java.util.Random;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import edu.rutgers.elearning.component.journalism.dao.*;
import edu.rutgers.elearning.component.pte.ProblemTemplateEngine;
import edu.rutgers.elearning.component.questions.GeneratedQuestion;
import edu.rutgers.elearning.component.questions.QuestionAnswer;
import edu.rutgers.elearning.component.questions.RegexQuestion;
import edu.rutgers.elearning.util.math.SigfigNumber;
import edu.rutgers.elearning.component.journalism.model.*;
import edu.rutgers.elearning.component.journalism.model.SubjectModel.Gender;
import edu.rutgers.elearning.component.journalism.pte.JournalismController;

public class YourOrYoure extends ProblemTemplateEngine {

SubjectDAO subjectAccess = new SubjectDAO();
Random rand = new Random();
String chosenSentenceAnswer, chosenSentenceDistractor;
SubjectModel SUBJECT1 = JournalismController.selectRandom(subjectAccess.selectByNounType(Arrays.asList(new String[] {"PROPERNAME"}), Arrays.asList(Gender.values())));
String PRONOUN1 = SUBJECT1.getPronoun();
SubjectModel SUBJECT  = JournalismController.selectRandom(subjectAccess.selectByNounType(Arrays.asList(new String[] {"PROPERNAME"}), Arrays.asList(Gender.values())));
String PROPERNAME  = SUBJECT .getSubject();

public YourOrYoure(int problemtemplate_id, int[] criticalskill_ids, int debugmode, QuestionType type) {
	super(problemtemplate_id, criticalskill_ids, debugmode, type);
	int distractorIndex, chosen;
String YOURAnswer, YOURDistractor;
YOURAnswer = YOURDistractor = "";
distractorIndex = 0;
ArrayList<String> YOURList = new ArrayList<String>();
chosen = rand.nextInt(1);
if(chosen==0){
	YOURList = new ArrayList<String>();
	YOURList.add("your");
	YOURList.add("you're");

	YOURAnswer = "your";
	distractorIndex = rand.nextInt(YOURList.size());
	YOURDistractor = YOURList.get(distractorIndex);
}

String UREAnswer, UREDistractor;
UREAnswer = UREDistractor = "";
distractorIndex = 0;
ArrayList<String> UREList = new ArrayList<String>();
chosen = rand.nextInt(1);
if(chosen==0){
	UREList = new ArrayList<String>();
	UREList.add("you're");
	UREList.add("your");

	UREAnswer = "you're";
	distractorIndex = rand.nextInt(UREList.size());
	UREDistractor = UREList.get(distractorIndex);
}

ArrayList<String> sentenceList = new ArrayList<String>();
ArrayList<String> distractorList = new ArrayList<String>();
            
sentenceList.add("Make " + YOURAnswer + " choice.");
distractorList.add("Make " + YOURDistractor + " choice.");
sentenceList.add("Is this " + YOURAnswer + " bike?");
distractorList.add("Is this " + YOURDistractor + " bike?");
sentenceList.add("Does " + YOURAnswer + " dog bite?");
distractorList.add("Does " + YOURDistractor + " dog bite?");
sentenceList.add("I am twice " + YOURAnswer + " age.");
distractorList.add("I am twice " + YOURDistractor + " age.");
sentenceList.add("Put " + YOURAnswer + " books away.");
distractorList.add("Put " + YOURDistractor + " books away.");
sentenceList.add("" + PRONOUN1.strip() + " will ask you when " + UREAnswer + " ready.");
distractorList.add("" + PRONOUN1.strip() + " will ask you when " + UREDistractor + " ready.");
sentenceList.add("" + UREAnswer + " working way too much.");
distractorList.add("" + UREDistractor + " working way too much.");
sentenceList.add("" + UREAnswer + " one step ahead of me.");
distractorList.add("" + UREDistractor + " one step ahead of me.");
sentenceList.add("" + UREAnswer + " engaged to " + PROPERNAME .strip() + "?");
distractorList.add("" + UREDistractor + " engaged to " + PROPERNAME .strip() + "?");
sentenceList.add("I hope " + UREAnswer + " going to get the job done by the deadline.");
distractorList.add("I hope " + UREDistractor + " going to get the job done by the deadline.");
int sentenceIndex = rand.nextInt(sentenceList.size());
chosenSentenceAnswer = sentenceList.get(sentenceIndex);
chosenSentenceDistractor = distractorList.get(sentenceIndex);
}
/**
	 * Formats the answers from a SigfigNumber into a
	 * QuestionAnswer object. Answers passed to this method
	 * can either be correct or incorrect answers.
	 *
	 * @param answer - The answer to be displayed
	 * @param correct - true if this is the correct answer, otherwise false
	 * @return QuestionAnswer - Answer to be displayed to the user as one
	 * 		   of the multiple choice options
	 */
	protected QuestionAnswer formatAnswer(SigfigNumber answer, boolean correct) {
		return null; //this isn't needed for open answer
	}

	/**
	 * Populates the multiple choice answers, typically
	 * one correct answer and four incorrect answers. If
	 * five answers are not defined, this method will generate
	 * answers similar to the correct answer.
	 *
	 * @return List&lt;QuestionAnswer&gt; - the answers to be displayed
	 * 		   to the users.
	 */
	public List<QuestionAnswer> getMultipleChoiceAnswers() {
		return null; //this isn't needed for open answer
	}

	/**
	 * Used to generate the question text displayed.
	 *
	 * @return question - String question, this will be
	 * 		   displayed to the user
	 */
	public String getQuestionText() {
            return chosenSentenceDistractor;
        }

	@Override
	/**
	 * Serves the question to the user. Depending on
	 * the type variable, this method will either
	 * serve a multiple choice question or an open
	 * answer question.
	 *
	 * @return GeneratedQuestion - object used to display
	 * 		   a multiple choice or open answer question
	 */
	public GeneratedQuestion serveQuestion() {
		RegexQuestion rq = new RegexQuestion();
		if (type == QuestionType.OPENANSWER) {
			rq.setRegex_accept(chosenSentenceAnswer);
			//gq.setRegex_reject(null);
		}
		if (rq != null) {
			rq.setQuestion_text(getQuestionText());
			rq.loadMetadata(problemtemplate_id);
			//gq.setDifficulty(difficulty);
			// TODO add critical skills
		}
		return rq;
	}

	public String storeDistractors()
	{
		HashMap<String, Object> dataMap = new HashMap<String, Object>();

		//not sure how to deal with this yet

		return dataMap.toString();
	}

	/**
	 * This method is for the 2018 Math Placement Exam.
	 * This method is to store the question data for a reporting
	 * service. This method will return a listing of all variables
	 * in this PTE
	 *
	 * @return String the version
	 */
	public String storeVersion()
	{
		HashMap<String, Object> dataMap = new HashMap<String, Object>();

                //TODO: this

		return dataMap.toString();
	}

	@Override
	public String getDebugInfo() {
		// TODO Auto-generated method stub
		return null;
	}

}

