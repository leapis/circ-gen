//autogenerated
package edu.rutgers.elearning.component.journalism.autogenerated;

import java.util.Random;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import edu.rutgers.elearning.component.journalism.dao.*;
import edu.rutgers.elearning.component.pte.ProblemTemplateEngine;
import edu.rutgers.elearning.component.questions.GeneratedQuestion;
import edu.rutgers.elearning.component.questions.QuestionAnswer;
import edu.rutgers.elearning.component.questions.RegexQuestion;
import edu.rutgers.elearning.util.math.SigfigNumber;
import edu.rutgers.elearning.component.journalism.model.*;
import edu.rutgers.elearning.component.journalism.model.SubjectModel.Gender;
import edu.rutgers.elearning.component.journalism.pte.JournalismController;

public class ItsOr extends ProblemTemplateEngine {

SubjectDAO subjectAccess = new SubjectDAO();
Random rand = new Random();
String chosenSentenceAnswer, chosenSentenceDistractor;

public ItsOr(int problemtemplate_id, int[] criticalskill_ids, int debugmode, QuestionType type) {
	super(problemtemplate_id, criticalskill_ids, debugmode, type);
	int distractorIndex, chosen;
String ONEAnswer, ONEDistractor;
ONEAnswer = ONEDistractor = "";
distractorIndex = 0;
ArrayList<String> ONEList = new ArrayList<String>();
chosen = rand.nextInt(1);
if(chosen==0){
	ONEList = new ArrayList<String>();
	ONEList.add("its");
	ONEList.add("it's");

	ONEAnswer = "its";
	distractorIndex = rand.nextInt(ONEList.size());
	ONEDistractor = ONEList.get(distractorIndex);
}

String TWOAnswer, TWODistractor;
TWOAnswer = TWODistractor = "";
distractorIndex = 0;
ArrayList<String> TWOList = new ArrayList<String>();
chosen = rand.nextInt(1);
if(chosen==0){
	TWOList = new ArrayList<String>();
	TWOList.add("it's");
	TWOList.add("its");

	TWOAnswer = "it's";
	distractorIndex = rand.nextInt(TWOList.size());
	TWODistractor = TWOList.get(distractorIndex);
}

ArrayList<String> sentenceList = new ArrayList<String>();
ArrayList<String> distractorList = new ArrayList<String>();
            
sentenceList.add("This cheese is past " + ONEAnswer + " expiration date.");
distractorList.add("This cheese is past " + ONEDistractor + " expiration date.");
sentenceList.add("This book is better than " + ONEAnswer + " cover would suggest.");
distractorList.add("This book is better than " + ONEDistractor + " cover would suggest.");
sentenceList.add("" + ONEAnswer + " greatest attribute is $1 flexibility.");
distractorList.add("" + ONEDistractor + " greatest attribute is $1 flexibility.");
sentenceList.add("The plant is in " + ONEAnswer + " pot.");
distractorList.add("The plant is in " + ONEDistractor + " pot.");
sentenceList.add("What is " + ONEAnswer + " country of origin?");
distractorList.add("What is " + ONEDistractor + " country of origin?");
sentenceList.add("" + TWOAnswer + " always raining here.");
distractorList.add("" + TWODistractor + " always raining here.");
sentenceList.add("" + TWOAnswer + " nice inside the house.");
distractorList.add("" + TWODistractor + " nice inside the house.");
sentenceList.add("I know " + TWOAnswer + " hard,but you”ll be okay.");
distractorList.add("I know " + TWODistractor + " hard,but you”ll be okay.");
sentenceList.add("She said " + TWOAnswer + " only a fifteen-minute drive.");
distractorList.add("She said " + TWODistractor + " only a fifteen-minute drive.");
sentenceList.add("" + TWOAnswer + " fun to go to the fair.");
distractorList.add("" + TWODistractor + " fun to go to the fair.");
int sentenceIndex = rand.nextInt(sentenceList.size());
chosenSentenceAnswer = sentenceList.get(sentenceIndex);
chosenSentenceDistractor = distractorList.get(sentenceIndex);
}
/**
	 * Formats the answers from a SigfigNumber into a
	 * QuestionAnswer object. Answers passed to this method
	 * can either be correct or incorrect answers.
	 *
	 * @param answer - The answer to be displayed
	 * @param correct - true if this is the correct answer, otherwise false
	 * @return QuestionAnswer - Answer to be displayed to the user as one
	 * 		   of the multiple choice options
	 */
	protected QuestionAnswer formatAnswer(SigfigNumber answer, boolean correct) {
		return null; //this isn't needed for open answer
	}

	/**
	 * Populates the multiple choice answers, typically
	 * one correct answer and four incorrect answers. If
	 * five answers are not defined, this method will generate
	 * answers similar to the correct answer.
	 *
	 * @return List&lt;QuestionAnswer&gt; - the answers to be displayed
	 * 		   to the users.
	 */
	public List<QuestionAnswer> getMultipleChoiceAnswers() {
		return null; //this isn't needed for open answer
	}

	/**
	 * Used to generate the question text displayed.
	 *
	 * @return question - String question, this will be
	 * 		   displayed to the user
	 */
	public String getQuestionText() {
            return chosenSentenceDistractor;
        }

	@Override
	/**
	 * Serves the question to the user. Depending on
	 * the type variable, this method will either
	 * serve a multiple choice question or an open
	 * answer question.
	 *
	 * @return GeneratedQuestion - object used to display
	 * 		   a multiple choice or open answer question
	 */
	public GeneratedQuestion serveQuestion() {
		RegexQuestion rq = new RegexQuestion();
		if (type == QuestionType.OPENANSWER) {
			rq.setRegex_accept(chosenSentenceAnswer);
			//gq.setRegex_reject(null);
		}
		if (rq != null) {
			rq.setQuestion_text(getQuestionText());
			rq.loadMetadata(problemtemplate_id);
			//gq.setDifficulty(difficulty);
			// TODO add critical skills
		}
		return rq;
	}

	public String storeDistractors()
	{
		HashMap<String, Object> dataMap = new HashMap<String, Object>();

		//not sure how to deal with this yet

		return dataMap.toString();
	}

	/**
	 * This method is for the 2018 Math Placement Exam.
	 * This method is to store the question data for a reporting
	 * service. This method will return a listing of all variables
	 * in this PTE
	 *
	 * @return String the version
	 */
	public String storeVersion()
	{
		HashMap<String, Object> dataMap = new HashMap<String, Object>();

                //TODO: this

		return dataMap.toString();
	}

	@Override
	public String getDebugInfo() {
		// TODO Auto-generated method stub
		return null;
	}

}

